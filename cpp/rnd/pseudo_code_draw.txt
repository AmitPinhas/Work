struct Circle{

public:
	GetDraw
	.
	.
	.
	GetRadius
	.
	.
	.	

private:
	radius
	color
	.
	.
	.
	Funcs functions  <----
};


struct Funcs{
	Draw()
	.
	.
	.
	.
};


Draw (C & c)
{
	while (begin != end)
	{
		(*begin).GetDraw();
	}
}
אלגוריתם:
בכל אובייקט של צורה כלשהי שתוגדר המשתמש יתבקש לשלוח את הפרמטרים הבסיסים של אותו אובייקט ובנוסף struct funcs שיכיל את כל הפונקציות שהמשתמש ירצה להפעיל על אותו האובייקט.

יתרונות:
1) פונקציית Draw תהיה מאוד פשוטה וללא הרבה קוד ותוכל בהתאם לכללים הנדרשים לעבוד על סוגי אובייקטים שונים polymorphism
2) במידה וכל משתמש ירצה לצייר את האובייקט שלו בצורה שונה או לחלופין לעשות פונקציות שונות בדרך ייחודית שמתאימה לצרכיו הוא יוכל לעשות. 

חסרונות:
1) בזבוז מקום רב, כל אובייקט שיווצר יחזיק בעצמו את כל הפונקציות כל פעם חדש גם אם הם יהיו זהות לחלוטין.
2) דרישה מהמשתמש ליצור קלאס של פונקציות בעצמו, דבר אשר ידרוש ממנו עוד התעסקות רבה. במקום שישתמש באובייקט ויכניס אליו אך ורק את הפרמטים שנדרשים.





